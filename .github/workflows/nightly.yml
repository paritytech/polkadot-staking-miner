name: Nightly test

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

env:
  IMAGE: docker.io/paritytech/ci-unified:bullseye-1.88.0-2025-06-27-v202507112050
  RUST_INFO: rustup show && cargo --version && rustup +nightly show && cargo +nightly --version

jobs:
  set-image:
    # GitHub Actions does not allow using 'env' in a container context.
    # This workaround sets the container image for each job using 'set-image' job output.
    runs-on: parity-large
    outputs:
      IMAGE: ${{ steps.set_image.outputs.IMAGE }}
    steps:
      - id: set_image
        run: echo "IMAGE=${{ env.IMAGE }}" >> $GITHUB_OUTPUT

  nightly-test:
    runs-on: parity-large
    needs: [set-image]
    container: ${{ needs.set-image.outputs.IMAGE }}
    strategy:
      matrix:
        channel:
          - name: "Staking Miner Dev"
            room: "!tXyUlsDAYvDfRKbzKx:parity.io"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout polkadot-sdk
        uses: actions/checkout@v4
        with:
          repository: paritytech/polkadot-sdk
          ref: sigurpol-fix-signal-propagation-justfile # temporarily until https://github.com/paritytech/polkadot-sdk/pull/9411 is merged
          path: polkadot-sdk

      - name: Install dependencies
        run: |
          # Install netcat for port checking
          apt-get update && apt-get install -y netcat
          # Install just
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin
          # Install bun
          curl -fsSL https://bun.sh/install | bash
          echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install zombienet globally
        run: npm install -g @zombienet/cli

      - name: Verify installations
        run: |
          zombienet --help
          just --version
          bun --version

      - name: Cache Rust dependencies for polkadot-sdk
        uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            polkadot-sdk
          key: ${{ runner.os }}-rust-polkadot-sdk-${{ hashFiles('polkadot-sdk/**/Cargo.lock') }}
          cache-on-failure: true

      - name: Cache Rust dependencies for staking-miner
        uses: swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-staking-miner-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      - name: Start zombienet for tests
        working-directory: polkadot-sdk/substrate/frame/staking-async/runtimes/papi-tests
        shell: bash
        run: |
          # Run setup steps manually instead of `just setup` to avoid to run the zombienet setup twice
          # (one to generate descriptors, one to actually run the setup for the tests)
          just install || echo "üöß Generate and installed missing descriptors..."
          just build-and-generate-chains

          # Debug: Find where binaries actually are
          echo "Current directory: $(pwd)"
          echo "Expected path should be: ../../../../../target/release/"
          echo "Searching for polkadot binaries in the entire workspace..."

          # Search broadly to find where they actually are
          find /__w -name "polkadot" -type f -executable 2>/dev/null | head -5
          find /__w -name "polkadot-parachain" -type f -executable 2>/dev/null | head -5

          # Set the binary paths
          POLKADOT_BIN=$(find /__w -name "polkadot" -type f -executable 2>/dev/null | head -1)
          POLKADOT_PARACHAIN_BIN=$(find /__w -name "polkadot-parachain" -type f -executable 2>/dev/null | head -1)

          if [ -n "$POLKADOT_BIN" ] && [ -n "$POLKADOT_PARACHAIN_BIN" ]; then
            echo "Creating symlinks for: $POLKADOT_BIN and $POLKADOT_PARACHAIN_BIN"
            ln -sf "$POLKADOT_BIN" /usr/local/bin/polkadot
            ln -sf "$POLKADOT_PARACHAIN_BIN" /usr/local/bin/polkadot-parachain

            # Verify they work
            which polkadot && polkadot --version
            which polkadot-parachain && polkadot-parachain --version
            bash -c "which polkadot-parachain"
          else
            echo "‚ùå Could not find polkadot binaries"
            exit 1
          fi

          # Start zombienet and wait for ws endpoints to be ready
          zombienet --provider native -l text spawn zn-s.toml 2>&1 &
          ZOMBIENET_PID=$!
          echo "ZOMBIENET_PID=$ZOMBIENET_PID" >> $GITHUB_ENV

          # Check if zombienet process is still running
          sleep 5
          if ! kill -0 $ZOMBIENET_PID 2>/dev/null; then
            echo "‚ùå Zombienet process died, check logs above"
            exit 1
          fi

          echo "‚è≥ Waiting for chains to be ready (ws endpoints on 9944, 9945 and 9946)..."
          for port in 9944 9945 9946; do
            for i in {1..24}; do
              if nc -z localhost $port; then
                echo "‚úÖ Port $port is open."
                break
              fi
              sleep 10
              if [ $i -eq 24 ]; then
                echo "‚ùå Timeout waiting for port $port"
                kill $ZOMBIENET_PID || true
                pkill -f zombienet || true
                exit 1
              fi
            done
          done

          echo "‚úÖ Zombienet is ready for tests!"

      - name: Run nightly tests
        run: |
          RUST_LOG="monitor=trace" cargo test --workspace --all-features -- --nocapture

      - name: Cleanup zombienet
        if: always()
        working-directory: polkadot-sdk/substrate/frame/staking-async/runtimes/papi-tests
        run: |
          if [ ! -z "$ZOMBIENET_PID" ]; then
            kill $ZOMBIENET_PID || true
          fi
          just killall

      # - name: Create an issue on failure
      #   if: failure()
      #   uses: JasonEtco/create-an-issue@v2
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     FAILED_WORKFLOW_RUN_URL: https://github.com/${{ github.repository }}/commit/${{ github.sha }}/checks/${{ github.run_id }}
      #   with:
      #     # Use this issue template:
      #     filename: .github/issue_templates/nightly_run_failed.md
      #     # Update existing issue if found; hopefully will make it clearer
      #     # that it is still an issue:
      #     update_existing: true
      #     # Look for new *open* issues in this search (we want to
      #     # create a new one if we only find closed versions):
      #     search_existing: open

      # - name: Notify daily integration tests failure
      #   if: failure()
      #   uses: s3krit/matrix-message-action@70ad3fb812ee0e45ff8999d6af11cafad11a6ecf # v0.0.3
      #   with:
      #     room_id: ${{ matrix.channel.room }}
      #     access_token: ${{ secrets.MATRIX_ACCESS_TOKEN }}
      #     server: m.parity.io
      #     message: |
      #       @room Daily integration tests failed https://github.com/${{ github.repository }}/commit/${{ github.sha }}/checks/${{ github.run_id }}
