name: Nightly test

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

env:
  IMAGE: docker.io/paritytech/ci-unified:bullseye-1.85.0-2025-01-28-v202504231537
  RUST_INFO: rustup show && cargo --version && rustup +nightly show && cargo +nightly --version

jobs:
  set-image:
    # GitHub Actions does not allow using 'env' in a container context.
    # This workaround sets the container image for each job using 'set-image' job output.
    runs-on: parity-large
    outputs:
      IMAGE: ${{ steps.set_image.outputs.IMAGE }}
    steps:
      - id: set_image
        run: echo "IMAGE=${{ env.IMAGE }}" >> $GITHUB_OUTPUT

  nightly-test:
    runs-on: parity-large
    needs: [set-image]
    container: ${{ needs.set-image.outputs.IMAGE }}
    strategy:
      matrix:
        channel:
          - name: "Staking Miner Dev"
            room: "!tXyUlsDAYvDfRKbzKx:parity.io"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout polkadot-sdk
        uses: actions/checkout@v4
        with:
          repository: paritytech/polkadot-sdk
          ref: master
          path: polkadot-sdk

      - name: Install dependencies
        run: |
          # Check if we need sudo
          echo "Current user: $(whoami)"
          echo "EUID: $EUID"
          if [ "$EUID" -ne 0 ]; then
            echo "Not running as root, will use sudo"
            SUDO="sudo"
          else
            echo "Running as root, no sudo needed"
            SUDO=""
          fi

          # Install netcat for port checking
          $SUDO apt-get update && $SUDO apt-get install -y netcat
          # Install just using the official script
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ${SUDO:+$SUDO} /usr/local/bin
          # Install bun
          curl -fsSL https://bun.sh/install | bash
          echo "$HOME/.bun/bin" >> $GITHUB_PATH

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install zombienet globally
        run: npm install -g @zombienet/cli

      - name: Verify installations
        run: |
          zombienet --help
          just --version
          bun --version

      - name: Cache Rust dependencies for polkadot-sdk
        uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            polkadot-sdk
          key: ${{ runner.os }}-rust-polkadot-sdk-${{ hashFiles('polkadot-sdk/**/Cargo.lock') }}
          cache-on-failure: true

      - name: Cache Rust dependencies for staking-miner
        uses: swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-staking-miner-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      - name: Setup polkadot-sdk test environment
        working-directory: polkadot-sdk/substrate/frame/staking-async/runtimes/papi-tests
        run: |
          # Debug: Let's see what happens when we run pkill directly
          echo "Testing pkill directly:"
          pkill -f zombienet || echo "pkill zombienet returned: $?"
          
          # Try using just with set +e to ignore errors
          set +e
          just setup
          SETUP_EXIT_CODE=$?
          set -e
          
          echo "just setup exited with code: $SETUP_EXIT_CODE"
          
          # Check if setup actually succeeded by verifying the output files exist
          if [ -f "parachain.json" ] && [ -f "rc.json" ]; then
            echo "Setup completed successfully despite exit code"
            exit 0
          else
            echo "Setup failed - missing expected files"
            exit 1
          fi

      - name: Start zombienet with fake-dot preset
        working-directory: polkadot-sdk/substrate/frame/staking-async/runtimes/papi-tests
        run: |
          # Start zombienet in background
          just run fake-dot &
          ZOMBIENET_PID=$!
          echo "ZOMBIENET_PID=$ZOMBIENET_PID" >> $GITHUB_ENV

          # Wait for port 9946 to be ready (maximum wait time = 5min)
          echo "Waiting for parachain collator on port 9946..."
          for i in {1..60}; do
            if nc -z localhost 9946; then
              echo "Port 9946 is ready!"
              break
            fi
            sleep 5
            if [ $i -eq 60 ]; then
              echo "Timeout waiting for port 9946"
              kill $ZOMBIENET_PID || true
              exit 1
            fi
          done

      - name: Run nightly tests
        run: |
          RUST_LOG="monitor=trace" cargo test --workspace --all-features -- --nocapture

      - name: Cleanup zombienet
        if: always()
        run: |
          if [ ! -z "$ZOMBIENET_PID" ]; then
            kill $ZOMBIENET_PID || true
          fi
          pkill -f zombienet || true
          pkill -f polkadot || true
          pkill -f polkadot-parachain || true

      # - name: Create an issue on failure
      #   if: failure()
      #   uses: JasonEtco/create-an-issue@v2
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     FAILED_WORKFLOW_RUN_URL: https://github.com/${{ github.repository }}/commit/${{ github.sha }}/checks/${{ github.run_id }}
      #   with:
      #     # Use this issue template:
      #     filename: .github/issue_templates/nightly_run_failed.md
      #     # Update existing issue if found; hopefully will make it clearer
      #     # that it is still an issue:
      #     update_existing: true
      #     # Look for new *open* issues in this search (we want to
      #     # create a new one if we only find closed versions):
      #     search_existing: open

      # - name: Notify daily integration tests failure
      #   if: failure()
      #   uses: s3krit/matrix-message-action@70ad3fb812ee0e45ff8999d6af11cafad11a6ecf # v0.0.3
      #   with:
      #     room_id: ${{ matrix.channel.room }}
      #     access_token: ${{ secrets.MATRIX_ACCESS_TOKEN }}
      #     server: m.parity.io
      #     message: |
      #       @room Daily integration tests failed https://github.com/${{ github.repository }}/commit/${{ github.sha }}/checks/${{ github.run_id }}
